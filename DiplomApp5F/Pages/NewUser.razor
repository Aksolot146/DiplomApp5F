@page "/user/add"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using DiplomApp5F.Models
@using DiplomApp5F.Services
@using Microsoft.Extensions.Logging;
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject ILogger<NewRequest> Logger
@inject AuthService authService

@if (userProfile != null && userProfile.RankId == 1)
{
    <h3>Добавление учётной записи</h3>

    <EditForm EditContext="@editContext">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="Login" @bind-Value="addUser.Login" placeholder="Логин" />
        <br />
        <InputText id="Mail" @bind-Value="addUser.Mail" placeholder="Почта" />
        <br />
        <InputText id="Password" @bind-Value="addUser.Password" placeholder="Пароль" />
        <br />
    </EditForm>

    <EditForm EditContext="@editContext2" OnValidSubmit="@AddAction">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="Nickname" @bind-Value="addUserProfile.Nickname" placeholder="Ник" />
        <br />

        <h6>Выберите отдел:</h6>
        @if (departments != null)
        {
            <InputSelect id="DeptId" @bind-Value="addUserProfile.DeptId">
                @foreach (var department in departments)
                        {
                    <option value="@department.Id">@department.Deptname</option>
                        }
            </InputSelect>
        }
        <br />

        <h6>Выберите ранг нового пользователя:</h6>
        @if (userRanks != null)
        {
            <InputSelect id="RankId" @bind-Value="addUserProfile.RankId">
                @foreach (var userRank in userRanks)
                        {
                    <option value="@userRank.Id">@userRank.Rankname</option>
                        }
            </InputSelect>
        }
        <br />

        <InputText id="UserDescription" @bind-Value="addUserProfile.Description" placeholder="Доп.сведения" />
        <br />

        <Button Type="submit" Name="Добавить" Width="100" />
        <Button Type="button" Name="Отмена" Width="100" OnClick="Back" HasActive="true"></Button>
    </EditForm>
}

@code {
    private EditContext editContext;
    private EditContext editContext2;
    private IEnumerable<Department> departments;
    private IEnumerable<UserRank> userRanks;
    private User addUser = new User();
    private UserProfile addUserProfile = new UserProfile();

    private CurrentUser currentUser;
    private UserProfile userProfile;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await authService.GetCurrentUserAsync();
        userProfile = new UserProfile();
        if (currentUser.Id > 0)
            userProfile = await Http.GetFromJsonAsync<UserProfile>($"https://localhost:44395/api/userprofiles/{currentUser.ProfileId}");

        editContext = new(addUser);
        editContext2 = new(addUserProfile);
        userRanks = await Http.GetFromJsonAsync<IEnumerable<UserRank>>("https://localhost:44395/api/userranks");
        departments = await Http.GetFromJsonAsync<IEnumerable<Department>>("https://localhost:44395/api/departments");
    }

    private async Task AddUser()
    {
        addUser.Profile = addUserProfile;
        await Http.PostAsJsonAsync("https://localhost:44395/api/users", (addUser));
        //addUserProfile.UserId = addUser.Id;
        //await Http.PostAsJsonAsync("https://localhost:44395/api/userprofiles", addUserProfile);
        //await Http.PutAsJsonAsync($"https://localhost:44395/api/userprofiles", addUserProfile);
    }

    private void Back()
    {
        navigationManager.NavigateTo("https://localhost:44351/user");
    }

    private async Task AddAction()
    {
        if (editContext != null && editContext.Validate())
        {
            await AddUser();
            Back();
        }
    }
}
