@page "/techpark/edit/model/{Id:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using DiplomApp5F.Models
@using DiplomApp5F.Services
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject AuthService authService

@if (userProfile != null && userProfile.RankId == 1)
{
    <h3>Изменить модель</h3>

    <EditForm EditContext="@editContext" OnValidSubmit="@EditAction">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h6>Тема:</h6>
        @*<InputText id="Title" @bind-Value="addRequest.Title" placeholder="Title" />*@
        @if (requestTitles != null)
        {
            @foreach (var requestTitle in requestTitles)
            {
                if (editRequestModel.RequestVendor.TitleId == requestTitle.Id)
                {
                    <p>@requestTitle.Titlename</p>
                    break;
                }
            }
        }

        <h6>Изготовитель:</h6>
        @*<InputText id="Title" @bind-Value="addRequest.Title" placeholder="Title" />*@
        @if (requestVendors != null)
        {
            @foreach (var requestVendor in requestVendors)
            {
                if (editRequestModel.VendorId == requestVendor.Id)
                {
                    <p>@requestVendor.Vendorname</p>
                    break;
                }
            }
        }

        <InputText id="Model" @bind-Value="editRequestModel.Modelname" placeholder="Модель" />
        <br />

        <InputText id="Description" @bind-Value="editRequestModel.Description" placeholder="Сведения" />
        <br />

        <Button Type="submit" Name="Изменить" Width="100" />
        <Button Type="button" Name="Удалить" Width="100" OnClick="Delete" HasActive="true"></Button>
        <Button Type="button" Name="Отмена" Width="100" OnClick="Back" HasActive="true"></Button>
    </EditForm>
}
else
{
    <p>Недостаточно прав для просмотра. Обратитесь к администратору системы.</p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private EditContext editContext;
    private RequestModel editRequestModel;
    private IEnumerable<RequestTitle> requestTitles;
    private IEnumerable<RequestVendor> requestVendors;

    private CurrentUser currentUser;
    private UserProfile userProfile;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await authService.GetCurrentUserAsync();
        userProfile = new UserProfile();
        if (currentUser.Id > 0)
            userProfile = await Http.GetFromJsonAsync<UserProfile>($"https://localhost:44395/api/userprofiles/{currentUser.ProfileId}");

        editRequestModel = new RequestModel();
        editContext = new(editRequestModel);
        editRequestModel = await Http.GetFromJsonAsync<RequestModel>($"https://localhost:44395/api/requestmodels/{Id}");
        editRequestModel.RequestVendor = await Http.GetFromJsonAsync<RequestVendor>($"https://localhost:44395/api/requestvendors/{editRequestModel.VendorId}");
        requestTitles = await Http.GetFromJsonAsync<IEnumerable<RequestTitle>>("https://localhost:44395/api/requesttitles");
        requestVendors = await Http.GetFromJsonAsync<IEnumerable<RequestVendor>>("https://localhost:44395/api/requestvendors");
    }

    private async Task SaveRequest()
    {
        //await Http.PutAsJsonAsync($"https://localhost:44395/api/requestvendors", editRequestModel.RequestVendor);
        await Http.PutAsJsonAsync($"https://localhost:44395/api/requestmodels", editRequestModel);
    }

    private void Back()
    {
        navigationManager.NavigateTo("https://localhost:44351/techpark");
    }

    private async Task EditAction()
    {
        if (editContext != null && editContext.Validate())
        {
            await SaveRequest();
            Back();
        }
    }

    private void Delete()
    {
        navigationManager.NavigateTo($"https://localhost:44351/techpark/delete/model/{Id}");
    }
}
