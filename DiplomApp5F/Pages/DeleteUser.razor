@page "/user/delete/{id:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using DiplomApp5F.Models
@using DiplomApp5F.Services
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject AuthService authService

@if (userProfile != null && userProfile.RankId == 1)
{
    <h3>Удаление учётной записи</h3>
    <p>Продолжить (учётная запись будет удалена)?</p>
    <Button Name="Да" Width="100" OnClick="DeleteAction" HasActive="true"></Button>
    <Button Name="Нет" Width="100" OnClick="Back" HasActive="true"></Button>
}
else
{
    <p>Недостаточно прав для просмотра. Обратитесь к администратору системы.</p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Request[] requests;
    private UserProfile[] userProfiles;

    private CurrentUser currentUser;
    private UserProfile userProfile;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await authService.GetCurrentUserAsync();
        userProfile = new UserProfile();
        if (currentUser.Id > 0)
            userProfile = await Http.GetFromJsonAsync<UserProfile>($"https://localhost:44395/api/userprofiles/{currentUser.ProfileId}");

        requests = await Http.GetFromJsonAsync<Request[]>("https://localhost:44395/api/requests");
        userProfiles = await Http.GetFromJsonAsync<UserProfile[]>("https://localhost:44395/api/userprofiles");
    }

    private async Task RemoveUser()
    {
        foreach (var userProfile in userProfiles)
        {
            foreach (var request in requests)
            {
                if (request.ProfileId == userProfile.Id && userProfile.UserId == Id)
                {
                    await Http.DeleteAsync($"https://localhost:44395/api/requests/{request.Id}");
                }
            }
        }
        foreach (var userProfile in userProfiles)
        {
            if (userProfile.UserId == Id)
            {
                await Http.DeleteAsync($"https://localhost:44395/api/userprofiles/{userProfile.Id}");
            }
        }
        await Http.DeleteAsync($"https://localhost:44395/api/users/{Id}");
    }

    private void Back()
    {
        navigationManager.NavigateTo($"https://localhost:44351/user");
    }

    private async Task DeleteAction()
    {
        await RemoveUser();
        Back();
    }
}
