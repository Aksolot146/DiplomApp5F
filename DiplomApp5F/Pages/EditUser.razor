@page "/user/edit/{id:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using DiplomApp5F.Models
@using DiplomApp5F.Services
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject AuthService authService

@if (userProfile != null && userProfile.RankId == 1)
{
    <h3>Изменить учётную запись</h3>

    @if (currentUser == null)
    {
        <div>Loading</div>
    }
    else
    {
        @if (currentUser.RankId != 1)
        {
            <h4>Нет доступа</h4>
        }
        else
        {
            <EditForm EditContext="@editContext2" OnValidSubmit="@EditAction">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <InputText id="Login" @bind-Value="editUser.Login" placeholder="Логин" />
                <br />

                <InputText id="Password" @bind-Value="editUser.Password" placeholder="Пароль" />
                <br />

                <InputText id="Mail" @bind-Value="editUser.Mail" placeholder="Почта" />
                <br />

            </EditForm>

            <EditForm EditContext="@editContext2" OnValidSubmit="@EditAction">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <InputText id="Nickname" @bind-Value="editUserProfile.Nickname" placeholder="Ник" />
                <br />

                <h6>Отдел</h6>
                @*<InputText id="Title" @bind-Value="addRequest.Title" placeholder="Title" />*@
                @if (departments != null)
                {
                    <InputSelect id="Dept" CurrentValue="@dept" @bind-Value="editUserProfile.DeptId">
                        @foreach (var department in departments)
                                        {
                            <option value="@department.Id">@department.Deptname</option>
                                        }
                    </InputSelect>
                }
                <br />

                <h6>Ранг</h6>
                @*<InputText id="Title" @bind-Value="addRequest.Title" placeholder="Title" />*@
                @if (userRanks != null)
                {
                    <InputSelect id="Rank" CurrentValue="@rank" @bind-Value="editUserProfile.RankId">
                        @foreach (var userRank in userRanks)
                                        {
                            <option value="@userRank.Id">@userRank.Rankname</option>
                                        }
                    </InputSelect>
                }
                <br />

                <InputText id="UserDescription" @bind-Value="editUserProfile.Description" placeholder="Доп.сведения" />
                <br />

                <Button Type="submit" Name="Изменить" Width="100" />
                <Button Type="button" Name="Удалить" Width="100" OnClick="Delete" HasActive="true"></Button>
                <Button Type="button" Name="Отмена" Width="100" OnClick="Back" HasActive="true"></Button>
            </EditForm>
        }
    }
}
else
{
    <p>Недостаточно прав для просмотра. Обратитесь к администратору системы.</p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private EditContext editContext;
    private EditContext editContext2;
    private User editUser;
    private UserProfile editUserProfile;
    private CurrentUser currentUser;
    //private IEnumerable<UserProfile> userProfiles;
    private IEnumerable<UserRank> userRanks;
    private IEnumerable<Department> departments;
    private int dept;
    private int rank;

    private CurrentUser currentUser2;
    private UserProfile userProfile;

    protected override async Task OnInitializedAsync()
    {
        currentUser2 = await authService.GetCurrentUserAsync();
        userProfile = new UserProfile();
        if (currentUser2.Id > 0)
            userProfile = await Http.GetFromJsonAsync<UserProfile>($"https://localhost:44395/api/userprofiles/{currentUser2.ProfileId}");

        editUser = new User();
        editContext = new(editUser);
        //Console.WriteLine(editUser.Profile.Id);
        editUserProfile = new UserProfile();
        editContext2 = new(editUserProfile);
        editUserProfile = await Http.GetFromJsonAsync<UserProfile>($"https://localhost:44395/api/userprofiles/{Id}");
        //Console.WriteLine($"editUserProfile.UserId: {editUserProfile.UserId}");
        editUser = await Http.GetFromJsonAsync<User>($"https://localhost:44395/api/users/{editUserProfile.UserId}");
        userRanks = await Http.GetFromJsonAsync<IEnumerable<UserRank>>("https://localhost:44395/api/userranks");
        departments = await Http.GetFromJsonAsync<IEnumerable<Department>>("https://localhost:44395/api/departments");
        currentUser = await authService.GetCurrentUserAsync();

        foreach (var department in departments)
        {
            if (department.Id == editUserProfile.DeptId)
            {
                dept = department.Id;
                break;
            }
        }

        foreach (var userRank in userRanks)
        {
            if (userRank.Id == editUserProfile.RankId)
            {
                rank = userRank.Id;
                break;
            }
        }
    }

    private async Task SaveUser()
    {
        await Http.PutAsJsonAsync($"https://localhost:44395/api/userprofiles", editUserProfile);
        await Http.PutAsJsonAsync($"https://localhost:44395/api/users", editUser);
    }

    private void Back()
    {
        navigationManager.NavigateTo("https://localhost:44351/user");
    }

    private async Task EditAction()
    {
        if (editContext != null && editContext.Validate())
        {
            await SaveUser();
            Back();
        }
    }

    private void Delete()
    {
        navigationManager.NavigateTo($"https://localhost:44351/user/delete/{Id}");
    }
}
