@page "/request/decline/{id:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using DiplomApp5F.Models
@using DiplomApp5F.Services
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject AuthService authService

@if (userProfile != null && (userProfile.RankId == 1 || userProfile.RankId == 2))
{
    <h3>Отклонить заявку</h3>
    <p>Продолжить (заявка будет отклонена)?</p>
    <Button Name="Да" Width="100" OnClick="EditAction" HasActive="true"></Button>
    <Button Name="Нет" Width="100" OnClick="Back" HasActive="true"></Button>
}
else
{
    <p>Недостаточно прав для просмотра. Обратитесь к администратору системы.</p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Request[] requests;

    private CurrentUser currentUser;
    private UserProfile userProfile;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await authService.GetCurrentUserAsync();
        userProfile = new UserProfile();
        if (currentUser.Id > 0)
            userProfile = await Http.GetFromJsonAsync<UserProfile>($"https://localhost:44395/api/userprofiles/{currentUser.ProfileId}");

        requests = await Http.GetFromJsonAsync<Request[]>($"https://localhost:44395/api/requests");
    }

    private async Task Decline()
    {
        foreach (var request in requests)
        {
            if (request.Id == Id)
            {
                request.StatusId = 3;
                request.CompleteTime = DateTime.Now;
                await Http.PutAsJsonAsync($"https://localhost:44395/api/requests", request);
                break;
            }
        }
    }

    private void Back()
    {
        navigationManager.NavigateTo($"https://localhost:44351/request");
    }

    private async Task EditAction()
    {
        await Decline();
        Back();
    }
}
