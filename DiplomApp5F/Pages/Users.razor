@page "/user"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using DiplomApp5F.Models
@using DiplomApp5F.Services
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject AuthService authService

@if (userProfile != null && userProfile.RankId == 1)
{
    <h3>Учётные записи</h3>
    <p>Нажмите на заголовки столбцов таблицы для сортировки</p>

    <Button Name="Добавить" Width="100" OnClick="Add"></Button>

    @if (users == null)
    {
        <p>Нет учётных записей.</p>
    }
    else
    {
        <table>
            <tr>
                <td @onclick="SortID">№</td>
                <td @onclick="SortProfileID">№ профиля</td>
                <td @onclick="SortLogin">Логин</td>
                <td @onclick="SortMail">Почта</td>
                <td @onclick="SortPassword">Пароль</td>
                <td @onclick="SortNickname">Ник</td>
                <td @onclick="SortRank">Ранг</td>
                <td @onclick="SortDepartment">Отдел</td>
                <td @onclick="SortDescription">Дополнительные сведения</td>
                <td @onclick="SortRegDate">Дата создания</td>
                <td @onclick="SortAuthDate">Дата последнего входа</td>
                <td>Уд.</td>
                <td>Ред.</td>
            </tr>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    @foreach (var userprofile in userProfiles)
                    {
                        if (userprofile.UserId == user.Id)
                        {
                            <td>@userprofile.Id</td>
                        }
                    }
                    <td>@user.Login</td>
                    <td>@user.Mail</td>
                    <td>@user.Password</td>
                    @foreach (var userprofile in userProfiles)
                    {
                        if (user.Id == userprofile.UserId)
                        {
                            <td>@userprofile.Nickname</td>
                            @foreach (var userrank in userRanks)
                            {
                                if (userrank.Id == userprofile.RankId)
                                {
                                    <td>@userrank.Rankname</td>
                                }
                            }
                            @foreach (var department in departments)
                            {
                                if (department.Id == userprofile.DeptId)
                                {
                                    <td>@department.Deptname</td>
                                }
                            }
                            <td>@userprofile.Description</td>
                            <td>@user.RegDate</td>
                            <td>@user.AuthDate</td>
                            <td><a href="@($"https://localhost:44351/user/delete/{userprofile.Id}")"><h2>🗑</h2></a></td>
                            <td><a href="@($"https://localhost:44351/user/edit/{userprofile.Id}")"><h2>✎</h2></a></td>
                        }
                    }
                </tr>
            }
        </table>
    }
}
else
{
    <p>Недостаточно прав для просмотра. Обратитесь к администратору системы.</p>
}

@code {
    private User[] users;
    private UserProfile[] userProfiles;
    private UserRank[] userRanks;
    private Department[] departments;

    private CurrentUser currentUser;
    private UserProfile userProfile;

    private bool sortId;
    private bool sortProfileId;
    private bool sortLogin;
    private bool sortMail;
    private bool sortPassword;
    private bool sortNickname;
    private bool sortRank;
    private bool sortDepartment;
    private bool sortDescription;
    private bool sortRegDate;
    private bool sortAuthDate;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await authService.GetCurrentUserAsync();
        userProfile = new UserProfile();
        if (currentUser.Id > 0)
            userProfile = await Http.GetFromJsonAsync<UserProfile>($"https://localhost:44395/api/userprofiles/{currentUser.ProfileId}");

        users = await Http.GetFromJsonAsync<User[]>("https://localhost:44395/api/users");
        userProfiles = await Http.GetFromJsonAsync<UserProfile[]>("https://localhost:44395/api/userprofiles");
        userRanks = await Http.GetFromJsonAsync<UserRank[]>("https://localhost:44395/api/userranks");
        departments = await Http.GetFromJsonAsync<Department[]>("https://localhost:44395/api/departments");
    }

    private void Add()
    {
        navigationManager.NavigateTo("https://localhost:44351/user/add");
    }

    private void SortID()
    {
        if (sortId)
            users = users.OrderByDescending(x => x.Id).ToArray();
        else
            users = users.OrderBy(x => x.Id).ToArray();

        sortId = !sortId;
    }

    private void SortProfileID()
    {
        if (sortProfileId)
            userProfiles = userProfiles.OrderByDescending(x => x.Id).ToArray();
        else
            userProfiles = userProfiles.OrderBy(x => x.Id).ToArray();

        sortProfileId = !sortProfileId;
    }

    private void SortLogin()
    {
        if (sortLogin)
            users = users.OrderByDescending(x => x.Login).ToArray();
        else
            users = users.OrderBy(x => x.Login).ToArray();

        sortLogin = !sortLogin;
    }

    private void SortMail()
    {
        if (sortMail)
            users = users.OrderByDescending(x => x.Mail).ToArray();
        else
            users = users.OrderBy(x => x.Mail).ToArray();

        sortMail = !sortMail;
    }

    private void SortPassword()
    {
        if (sortPassword)
            users = users.OrderByDescending(x => x.Password).ToArray();
        else
            users = users.OrderBy(x => x.Password).ToArray();

        sortPassword = !sortPassword;
    }

    private void SortDescription()
    {
        if (sortDescription)
            userProfiles = userProfiles.OrderByDescending(x => x.Description).ToArray();
        else
            userProfiles = userProfiles.OrderBy(x => x.Description).ToArray();

        sortDescription = !sortDescription;
    }

    private void SortNickname()
    {
        if (sortNickname)
            userProfiles = userProfiles.OrderByDescending(x => x.Nickname).ToArray();
        else
            userProfiles = userProfiles.OrderBy(x => x.Nickname).ToArray();

        sortNickname = !sortNickname;
    }

    private void SortRank()
    {
        if (sortRank)
            userProfiles = userProfiles.OrderByDescending(x => x.RankId).ToArray();
        else
            userProfiles = userProfiles.OrderBy(x => x.RankId).ToArray();

        sortRank = !sortRank;
    }

    private void SortDepartment()
    {
        if (sortDepartment)
            userProfiles = userProfiles.OrderByDescending(x => x.DeptId).ToArray();
        else
            userProfiles = userProfiles.OrderBy(x => x.DeptId).ToArray();

        sortDepartment = !sortDepartment;
    }

    private void SortRegDate()
    {
        if (sortRegDate)
            users = users.OrderByDescending(x => x.RegDate).ToArray();
        else
            users = users.OrderBy(x => x.RegDate).ToArray();

        sortRegDate = !sortRegDate;
    }

    private void SortAuthDate()
    {
        if (sortAuthDate)
            users = users.OrderByDescending(x => x.AuthDate).ToArray();
        else
            users = users.OrderBy(x => x.AuthDate).ToArray();

        sortAuthDate = !sortAuthDate;
    }
}
}
