@page "/request/postpone/{id:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using DiplomApp5F.Models
@using DiplomApp5F.Services
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject AuthService authService

@if (userProfile != null && (userProfile.RankId == 1 || userProfile.RankId == 2))
{
    <h3>Отложить заявку</h3>

    <EditForm EditContext="@editContext" OnValidSubmit="@EditAction">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputDate id="CompleteTime" @bind-Value="editRequest.Deadline"/>
        <br />

        <Button Type="submit" Name="Отложить" Width="100" />
        <Button Type="button" Name="Отмена" Width="100" OnClick="Back" HasActive="true"></Button>
    </EditForm>
}
else
{
    <p>Недостаточно прав для просмотра. Обратитесь к администратору системы.</p>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private EditContext editContext;
    private Request editRequest;

    private CurrentUser currentUser;
    private UserProfile userProfile;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await authService.GetCurrentUserAsync();
        userProfile = new UserProfile();
        if (currentUser.Id > 0)
            userProfile = await Http.GetFromJsonAsync<UserProfile>($"https://localhost:44395/api/userprofiles/{currentUser.ProfileId}");

        editRequest = new Request();
        editContext = new(editRequest);
        editRequest = await Http.GetFromJsonAsync<Request>($"https://localhost:44395/api/requests/{Id}");
    }

    private async Task Postpone()
    {
        editRequest.StatusId = 1;
        await Http.PutAsJsonAsync($"https://localhost:44395/api/requests", editRequest);
    }

    private void Back()
    {
        navigationManager.NavigateTo("https://localhost:44351/request");
    }

    private async Task EditAction()
    {
        if (editContext != null && editContext.Validate())
        {
            await Postpone();
            Back();
        }
    }
}
